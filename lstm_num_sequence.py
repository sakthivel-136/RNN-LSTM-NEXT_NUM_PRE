# -*- coding: utf-8 -*-
"""Lstm_Num_Sequence.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vZpUNo2dbTCkqk8YEFsaQjDh4Upd1B5T
"""

import numpy as np
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt

# Prepare sequence data
sequence = np.array([i for i in range(1, 101)])  # 1 to 100
window_size = 3  # Number of previous steps to look at

X = []
y = []

for i in range(len(sequence) - window_size):
    X.append(sequence[i:i + window_size])
    y.append(sequence[i + window_size])

X = np.array(X)
y = np.array(y)

# Reshape X to fit RNN input: (samples, timesteps, features)
X = X.reshape((X.shape[0], X.shape[1], 1))

model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(window_size, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')  # üîÅ use full name!

# Train the model
model.fit(X, y, epochs=500, verbose=0)
print("Training Completed")

model.save("lstm_sequence_model.h5")
print("Model saved successfully!")

loaded_model = load_model("lstm_sequence_model.h5")
print("Model loaded successfully!")

# Predict the next number after [18, 19, 20]
test_input = np.array([18, 19, 20]).reshape((1, window_size, 1))
predicted = model.predict(test_input, verbose=0)

print(f"Predicted next number: {predicted[0][0]:.2f}")

# Predict values for the entire sequence
y_pred = model.predict(X, verbose=0)

plt.figure(figsize=(10, 5))
plt.plot(range(window_size, 100), y, label='Actual')
plt.plot(range(window_size, 100), y_pred.flatten(), label='Predicted', linestyle='--')
plt.title("LSTM Sequence Prediction")
plt.xlabel("Time Step")
plt.ylabel("Value")
plt.legend()
plt.grid(True)
plt.show()